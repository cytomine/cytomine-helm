{{ if .Values.pims.deploy }}
{{- $imageStorageClassName := .Values.pims.imageStorage.storageClassName | required ".Values.pims.imageStorage.storageClassName is required." -}}
{{- $tempImageStorageClassName := .Values.pims.tempImageStorage.storageClassName | required ".Values.pims.tempImageStorage.storageClassName is required." -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pims
  annotations:
    kube-score/ignore: pod-probes,container-security-context-user-group-id
  labels:
    role: pims
    app: {{ include "cytomine.name" . }}
    component: {{ .Release.Name }}-pims
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pims
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        role: pims
        app: pims
        release: {{ .Release.Name }}
      annotations:
        checksum/config: "{{ include (print $.Template.BasePath "/pims/pims-config.yaml") . | sha256sum }}"
    spec:
      securityContext:
        runAsUser: {{ .Values.containerSecurity.userID }}
        fsGroup: {{ .Values.containerSecurity.fsgroupID }}
      serviceAccountName: {{ include "cytomine.serviceAccountName" . }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: pims-logging
          configMap:
            name: pims-logging
        - name: temp
          emptyDir: {}
        {{- if .Values.pims.datasetImportFolder }}
        - name: import-folder
          hostPath:
            path: {{ .Values.pims.datasetImportFolder }} # directory location on host
            type: {{ .Values.pims.datasetImportFolderFailIfAbsent | ternary "Directory" "DirectoryOrCreate" | quote  }} # this field is optional
        {{- end }}
      containers:
        - name: pims
          image: "{{ .Values.images.pims }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          envFrom:
            - configMapRef:
                name: pims-config
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.database }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.user }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-core-secret
                  key: password
            - name: CYTOMINE_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: pims-secret
                  key: public_key
            - name: CYTOMINE_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: pims-secret
                  key: private_key
            {{- if .Values.pims.datasetImportFolder }}
            - name: DATASET_PATH
              value: {{.Values.pims.datasetImportFolder }}
            {{- end }}
          volumeMounts:
            - name: images
              mountPath: "/data/images"
            - name: images
              mountPath: "/data/pims"
            - name: images-temp
              mountPath: "/tmp/uploaded"
            - name: pims-logging
              mountPath: /cm_configs/app/logging.yml
              subPath: logging.yml
            - name: temp
              mountPath: /tmp
            - name: temp
              mountPath: /app
            {{- if .Values.pims.datasetImportFolder }}
            - mountPath: "/data/dataset"
              name: import-folder
              readOnly: true
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.pims.port }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurity.allowPrivilegeEscalation }}
            privileged: {{ .Values.containerSecurity.privileged }}
            readOnlyRootFilesystem: {{ .Values.containerSecurity.readOnlyRootFilesystem }}
          resources:
            {{- toYaml .Values.pims.resources | nindent 12 }}
      initContainers:
        - name: pims-init
          image: "{{ .Values.images.pims }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurity.allowPrivilegeEscalation }}
            privileged: {{ .Values.containerSecurity.privileged }}
            readOnlyRootFilesystem: {{ .Values.containerSecurity.readOnlyRootFilesystem }}
          command:
            - /bin/bash
            - -c
            - >
              set -x;
              cp -r /app/* /fix/;
          volumeMounts:
            - name: temp
              mountPath: /fix/
          resources:
            {{- toYaml .Values.pims.resources | nindent 12 }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: images
      spec:
        storageClassName: {{ $imageStorageClassName }}
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: {{ .Values.imageStorage }}
    - metadata:
        name: images-temp
      spec:
        storageClassName: {{ $tempImageStorageClassName }}
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: {{ .Values.tempImageStorage }}
{{ end }}

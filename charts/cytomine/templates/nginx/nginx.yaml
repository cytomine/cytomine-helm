{{ if .Values.nginx.deploy }}
{{- $imageStorageClassName := .Values.pims.imageStorage.storageClassName | required ".Values.pims.imageStorage.storageClassName is required." -}}
{{- $tempImageStorageClassName := .Values.pims.tempImageStorage.storageClassName | required ".Values.pims.tempImageStorage.storageClassName is required." -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nginx
  annotations:
    kube-score/ignore: pod-probes,container-security-context-user-group-id
  labels:
    role: nginx
    app: {{ include "cytomine.name" . }}
    component: {{ .Release.Name }}-nginx
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        role: nginx
        app: nginx
        release: {{ .Release.Name }}
    spec:
      securityContext:
        runAsUser: {{ .Values.containerSecurity.userID }}
        fsGroup: {{ .Values.containerSecurity.fsgroupID }}
      serviceAccountName: {{ include "cytomine.serviceAccountName" . }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: temp
          emptyDir: {}
      containers:
        - name: nginx
          image: "{{ .Values.images.nginx }}"
          workingDir: /tmp
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |-
              echo Doing ugly stuff to let nginx handle resolution
              echo while still working nice with namespaces

              set -x
              append=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local

              INTERNAL_URLS_CORE=$(echo $INTERNAL_URLS_CORE | sed -e "s/:/.$append:/")
              INTERNAL_URLS_WEB_UI=$(echo $INTERNAL_URLS_WEB_UI | sed -e "s/:/.$append:/")
              INTERNAL_URLS_IMS=$(echo $INTERNAL_URLS_IMS | sed -e "s/:/.$append:/")
              INTERNAL_URLS_IMS2=$(echo $INTERNAL_URLS_IMS2 | sed -e "s/:/.$append:/")
              INTERNAL_URLS_IMS3=$(echo $INTERNAL_URLS_IMS3 | sed -e "s/:/.$append:/")
              /nginx-entrypoint.sh
              /usr/local/bin/cytomine-entrypoint.sh
              /docker-entrypoint.sh
              nginx

          envFrom:
            - configMapRef:
                name: nginx-global-config
          volumeMounts:
            - name: nginx-config
              mountPath: /cm_configs/etc/nginx/nginx.conf.sample
              subPath: nginx.conf.sample
            - name: nginx-config
              mountPath: /cm_configs/etc/nginx/cors_params
              subPath: cors_params
            - name: image-temp
              mountPath: "/tmp/uploaded"
            - name: temp
              mountPath: "/var/cache/nginx/client_temp"
            - name: temp
              mountPath: "/var/cache/nginx/proxy_temp"
            - name: temp
              mountPath: "/var/cache/nginx/fastcgi_temp"
            - name: temp
              mountPath: "/var/cache/nginx/uwsgi_temp"
            - name: temp
              mountPath: "/var/cache/nginx/scgi_temp"
            - name: temp
              mountPath: "/www"
            - name: temp
              mountPath: "/var/run"
            - name: temp
              mountPath: /etc/nginx
              subPath: nginx
            - name: temp
              mountPath: /etc/nginx/proxy_temp
            - name: temp
              mountPath: /tmp
          ports:
            - name: http
              containerPort: {{ .Values.nginx.port }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurity.allowPrivilegeEscalation }}
            privileged: {{ .Values.containerSecurity.privileged }}
            readOnlyRootFilesystem: {{ .Values.containerSecurity.readOnlyRootFilesystem }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
      initContainers:
        - name: nginx-init
          image: "{{ .Values.images.nginx }}"
          command:
            - /bin/sh
            - -c
            - >
              set -x;
              cp -R /etc/nginx /fix && chown -R 20000:20000 /fix/nginx;
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurity.allowPrivilegeEscalation }}
            privileged: {{ .Values.containerSecurity.privileged }}
            readOnlyRootFilesystem: {{ .Values.containerSecurity.readOnlyRootFilesystem }}
          volumeMounts:
            - name: temp
              mountPath: /fix/
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: image
      spec:
        storageClassName: {{ $imageStorageClassName }}
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: {{ .Values.imageStorage }}
    - metadata:
        name: image-temp
      spec:
        storageClassName: {{ $tempImageStorageClassName }}
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: {{ .Values.tempImageStorage }}
{{ end }}
